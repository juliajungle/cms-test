{"version":3,"sources":["query.js","Interview.js","Interviews.js","App.js","reportWebVitals.js","index.js"],"names":["INTERVIEWS_QUERY","gql","Interview","item","intro","title","date","formattedDate","Date","console","log","toLocaleDateString","className","style","width","Interviews","props","query","loading","error","data","items","interviews","map","id","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","client","ApolloClient","uri","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"saAEA,IAWeA,E,MAXUC,GAAH,K,iBCkBPC,EAjBG,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACXC,EAAuBD,EAAvBC,MAAOC,EAAgBF,EAAhBE,MAAOC,EAASH,EAATG,KAChBC,EAAgB,IAAIC,KAAKF,GAG/B,OAFAG,QAAQC,IAAIJ,EAAMC,EAAcI,sBAG9B,qBAAKC,UAAU,UAAf,SACE,qBAAKA,UAAU,OAAOC,MAAO,CAAEC,MAAO,SAAtC,SACE,sBAAKF,UAAU,YAAf,UACE,oBAAIA,UAAU,aAAd,SAA4BP,IAC5B,cAAC,IAAD,UAAgBD,IACfE,GAAQ,uCAAUC,EAAcI,gCCoB5BI,E,kDA5Bb,WAAYC,GAAQ,uCACZA,G,qDAIN,OACE,cAAC,IAAD,CAAOC,MAAOjB,EAAd,SACG,YAA+B,IAA5BkB,EAA2B,EAA3BA,QAASC,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,KAClB,GAAIF,EAAS,OAAO,2DACpB,GAAIC,EAAO,OAAO,sDAElB,IAAME,EAAQD,EAAKE,WACnB,OACE,8BACE,qBAAKV,UAAU,iBAAf,SACE,qBAAKA,UAAU,MAAf,SACGS,EAAME,KAAI,SAACpB,GAAD,OACT,cAAC,EAAD,CAAyBA,KAAMA,GAAfA,EAAKqB,oB,GAlBhBC,aCOVC,MATf,WACE,OACE,sBAAKd,UAAU,MAAf,UACE,wBAAQA,UAAU,aAAlB,4BACA,cAAC,EAAD,QCKSe,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCCRQ,EAAS,IAAIC,IAAa,CAC9BC,IACE,8EAGJC,IAASC,OACP,cAAC,IAAD,CAAgBJ,OAAQA,EAAxB,SACE,cAAC,IAAMK,WAAP,UACE,cAAC,EAAD,QAGJC,SAASC,eAAe,SAM1BhB,K","file":"static/js/main.fc8eeaac.chunk.js","sourcesContent":["import gql from \"graphql-tag\";\n\nconst INTERVIEWS_QUERY = gql`\n  query {\n    interviews {\n      id\n      title\n      intro\n      createdAt\n      date\n    }\n  }\n`;\nexport default INTERVIEWS_QUERY;\n","import React from \"react\";\nimport ReactMarkdown from \"react-markdown\";\n\nconst Interview = ({ item }) => {\n  const { intro, title, date } = item;\n  const formattedDate = new Date(date);\n  console.log(date, formattedDate.toLocaleDateString());\n\n  return (\n    <div className=\"col-m-4\">\n      <div className=\"card\" style={{ width: \"18rem\" }}>\n        <div className=\"card-body\">\n          <h5 className=\"card-title\">{title}</h5>\n          <ReactMarkdown>{intro}</ReactMarkdown>\n          {date && <p>Date: {formattedDate.toLocaleDateString()}</p>}\n        </div>\n      </div>\n    </div>\n  );\n};\nexport default Interview;\n","import React, { Component } from \"react\";\nimport { Query } from \"react-apollo\";\nimport INTERVIEWS_QUERY from \"./query\";\nimport Interview from \"./Interview\";\n\nclass Interviews extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return (\n      <Query query={INTERVIEWS_QUERY}>\n        {({ loading, error, data }) => {\n          if (loading) return <div>Fetching interviews.....</div>;\n          if (error) return <div>Error fetching data</div>;\n\n          const items = data.interviews;\n          return (\n            <div>\n              <div className=\"container mt-4\">\n                <div className=\"row\">\n                  {items.map((item) => (\n                    <Interview key={item.id} item={item} />\n                  ))}\n                </div>\n              </div>\n            </div>\n          );\n        }}\n      </Query>\n    );\n  }\n}\nexport default Interviews;\n","import \"./App.css\";\nimport Interviews from \"./Interviews\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">Interview test</header>\n      <Interviews />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { ApolloProvider } from \"react-apollo\";\nimport ApolloClient from \"apollo-boost\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nconst client = new ApolloClient({\n  uri:\n    \"https://api-eu-central-1.graphcms.com/v2/ckhsabetgzaj301zb5ka5b2w0/master\",\n});\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </ApolloProvider>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}